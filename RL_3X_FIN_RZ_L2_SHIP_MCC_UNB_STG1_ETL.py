
#
# RL_3X_FIN_RZ_L2_SHIP_MCC_UNB_STG1_ETL.py
#

import os
import json
import io
import sys
from datetime import datetime
from pyspark.sql import SparkSession, DataFrame, Row, SQLContext
from pyspark import SparkContext
from pyspark.sql.window import Window
import pyspark.sql.types as T
import pyspark.sql.functions as F

def fetch_schema_name(stmt_id, spark_session, schema_name):
    print("fetching schema name for {schema_name}".format(schema_name=schema_name))
    ret_val = None
    try:
        df = spark_session.sql("select param_value from edw_control.param_env where param_nm = '{schema_name}';".format(schema_name=schema_name))
        if df.count() > 0:
            df.show(10, False)
            data = df.collect()
            #print(data)
            ret_val_list = [ row.param_value for row in data ]
            #print(ret_val_list)
            ret_val = ret_val_list[0]
            print("param value for {schema_name} -- {ret_val}".format(schema_name=schema_name, ret_val=ret_val))
        else:
            ret_val = None
    except Exception as e:
        print("ERROR {}".format(str(e)))
        ret_val = None
    return ret_val

def fetch_param_value(stmt_id, spark_session, param_name):
    print("fetching value for {param_name}".format(param_name=param_name))
    ret_val = None
    try:
        query_string="""
        select concat('Select ', column_nm, ' as ', param_nm, ' from ', table_nm, ' ', clause, ';' )
        from edw_control.param_mapping
        where param_nm = '{param_name}';
        """.format(param_name=param_name)
        df = spark_session.sql(query_string)
        if df.count() > 0:
            df.show(10, False)
            data = df.collect()
            q_list = [ row[0] for row in data ]
            q = q_list[0]
            df2 = spark_session.sql(q)
            if df2.count() > 0:
                df2.show(10, False)
                data2 = df2.collect()
                r_list = [ row[0] for row in data2 ]
                ret_val = r_list[0]
                print("param value for {param_name} -- {ret_val}".format(param_name=param_name, ret_val=ret_val))
            else:
                ret_val = None
        else:
            ret_val = None
    except Exception as e:
        print("ERROR {}".format(str(e)))
        ret_val = None
    return ret_val

def execute_sql(stmt_id, spark_session, spark_context, sql_context, query_string):
    print("executing {stmt_id} - {query_string}".format(stmt_id=stmt_id, query_string=query_string))
    ret_val = False
    try:
        spark_session.sql(query_string)
        ret_val = True
    except Exception as e:
        print("ERROR {}".format(str(e)))
        ret_val = False
    return ret_val

def execute():
    spark_session = (SparkSession.builder
        .config("spark.sql.extensions", "io.delta.sql.DeltaSparkSessionExtension")
        .getOrCreate()
    )
    spark_context = spark_session.sparkContext
    sql_context = SQLContext(spark_context)

    PARAM_SCHEMA_ETL_SCHEMA_s = fetch_schema_name("1", spark_session, "ETL_SCHEMA")
    if PARAM_SCHEMA_ETL_SCHEMA_s is None:
        print("ERROR fetching value for parameter 'PARAM_SCHEMA_ETL_SCHEMA_s'")
        sys.exit(1)
    query_to_execute = """USE {PARAM_SCHEMA_ETL_SCHEMA_s};""".format(PARAM_SCHEMA_ETL_SCHEMA_s=PARAM_SCHEMA_ETL_SCHEMA_s)
    ret_val = execute_sql("1", spark_session, spark_context, sql_context, query_to_execute)
    if ret_val is False:
        print("ERROR executing query {query_to_execute}".format(query_to_execute=query_to_execute))
        sys.exit(1)

    query_to_execute = """DELETE FROM STG_FIN_RZ_SHIP_DTL_CONTRA_DRV_FNL_ETL;""" 
    ret_val = execute_sql("2", spark_session, spark_context, sql_context, query_to_execute)
    if ret_val is False:
        print("ERROR executing query {query_to_execute}".format(query_to_execute=query_to_execute))
        sys.exit(2)

    #query_to_execute = """INSERT INTO STG_FIN_RZ_SHIP_DTL_CONTRA_DRV_FNL_ETL SELECT t.SHIP_ID,t.SRC_SYS_KY,t.SHIP_LN_ITM_ID,t.SHIP_DT,t.SO_ADJ_CD,t.EFF_FRM_GMT_TS,t.BUS_AREA_CD,t.SO_ID,t.ORD_CRT_DT,t.SO_LN_ITM_ID,t.REC_EXPLN_CD,'M' || trim(MISC_CHRG_CD.MISC_CHRG_CD) || '_' || trim(t.QTA_PROD_LN_ID) AS MCC_PROD_ID,MAX(t.CONTRA_FG),MAX(t.PRFT_CTR_CD),MAX(t.CBN_ID),MAX(t.SLDT_CUST_ID),MAX(t.SHPT_CUST_ID),MAX(t.BILT_CUST_ID),MAX(t.END_CUST_ID),MAX(t.MGMT_GEO_CD),MAX(t.SO_TYPE_CD),MAX(t.OM_SRC_SYS_KY),MAX(t.FIN_CLOSE_DT),MAX(t.SRC_PROD_LN_ID),MAX(t.FUNC_AREA_CD),MAX(t.CROSS_BORD_FG),MAX(t.SLS_CHNL_CD),MAX(t.DOC_CRNCY_CD),MAX(t.QTA_PROD_LN_ID),MAX(t.EFF_TO_GMT_TS),MAX(t.CUST_REQD_DLVR_DT),MAX(t.INVN_CLS_CD),'Y' AS QTA_PROD_LN_OVERR_FG,MAX(t.SLS_ORG_CD),MAX(t.SHIP_FRM_PLNT_CD),MAX(t.PARNT_SO_LN_ITM_ID),MAX(t.LEGL_CO_CD),MAX(t.SO_MTHD_CD),MAX(t.LEG_SO_ID),MAX(t.LEG_SO_LN_ITM_ID),SUM(t.SHIP_QT),0 AS SHIP_SLS_QT,SUM(t.UNIT_PRC_AM),SUM(t.GRS_EXT_SHIP_AM),SUM(t.GRS_EXT_SHIP_USD_AM),SUM(t.ORD_ADJ_SHIP_AM),SUM(t.ORD_ADJ_SHIP_USD_AM),SUM(t.NET_EXT_SHIP_AM),SUM(t.NET_EXT_SHIP_USD_AM),MAX(t.INS_GMT_TS),MAX(t.UPD_GMT_TS),MAX(t.REC_ST_NR),MAX(t.LOAD_JOB_NR),MAX(t.LGCL_DEL_FG),MAX(t.DSTRB_CHNL_CD),MAX(t.ORD_RSN_CD),MAX(t.VALU_DLVR_CHAIN_CD),MAX(t.ACCT_MGR_ID),MAX(t.BASE_UNIT_OF_MSR_CD),MAX(t.BIG_DEAL_ID),'B' AS BUS_TYPE_CD,MAX(t.CMRCL_CD),MAX(t.CUST_APP_CD),MAX(t.CUST_CNTRCT_ID),MAX(t.CUST_PO_ID),MAX(t.DLVR_MTHD_CD),MAX(t.GOV_CNTRCT_ID),MAX(t.INDNT_FG),MAX(t.LC_CD),'?' AS MATL_SLS_UNIT_OF_MSR_CD,MAX('M' || trim(MISC_CHRG_CD.MISC_CHRG_CD) || '_' || trim(t.QTA_PROD_LN_ID)) AS ORIG_PROD_ID,MAX(t.PAYM_TERM_CD),MAX(t.PRIM_AGNT_ID),MAX(t.PROJ_ID),MAX(t.PROMO_CD),MAX(t.SECND_AGNT_ID),MAX(t.SHPT_ISO_CTRY_CD),MAX(t.SLS_FRC_CD),MAX(t.SLS_OFF_CD),MAX(t.SLS_REP_CD),MAX(t.SLS_SUB_ENT_CD),MAX(t.SRVC_NOTIF_ID),MAX(t.SUPLYG_DIV_SUB_ENT_CD),MAX(t.WBS_ID),SUM(t.SHIP_ADJ_AM),MAX(t.TEAM_CD_ID),MAX(t.FRST_TCHPT_ACTL_SHIP_TS),MAX(t.LAST_TCHPT_ACTL_SHIP_TS),MAX(t.SHIP_POST_TS),MAX(t.QTA_CR_SUB_ENT_CD),MAX(t.GL_GRP_ACCT_ID),AVG(t.DOC_EXCH_RT),AVG(t.DOC_MTH_3_EXCH_RT),AVG(t.DOC_MTH_12_EXCH_RT),SUM(t.SHIP_ADJ_USD_AM),SUM(t.NET_CNSTNT_3_MTH_SHIP_USD_AM),SUM(t.NET_CNSTNT_12_MTH_SHIP_USD_AM),MAX(t.CONV_TYPE_ID),MAX(t.CONV_RT_CD),MAX(t.TRSY_BUS_ORG_CD),MAX(t.ORD_CRT_DT_YR_MTH_CD),MAX(t.UNRSTD_BUS_AREA_CD),MAX(t.PARNT_SO_ID),MAX(CASE WHEN (TRIM(t.REC_EXPLN_PRCS_CD) = '?') THEN 'M' ELSE TRIM(t.REC_EXPLN_PRCS_CD) || 'M' END) AS REC_EXPLN_PRCS_CD,MAX(t.PARNT_PROD_ID),MAX(t.FDW_TRD_INTRA_CO_FG),AVG(t.LC_EXCH_RT),AVG(t.LC_MTH_3_EXCH_RT),AVG(t.LC_MTH_12_EXCH_RT),SUM(t.NET_EXT_SHIP_LC_AM),SUM(t.GRS_EXT_SHIP_LC_AM),SUM(t.ORD_ADJ_SHIP_LC_AM),SUM(t.SHIP_ADJ_LC_AM),SUM(CASE WHEN ((STG_FIN_RZ_SHIP_PROD_D_ETL.MDL_UNITS_PER_SKU_QT > 1)) THEN NVL(t.SHIP_QT * STG_FIN_RZ_SHIP_PROD_D_ETL.MDL_UNITS_PER_SKU_QT,t.SHIP_QT) ELSE t.SHIP_QT END) AS SHIP_EXT_QT,SUM(CASE WHEN ((STG_FIN_RZ_SHIP_PROD_D_ETL.MDL_UNITS_PER_SKU_QT > 1) AND (STG_FIN_RZ_SHIP_PROD_D_ETL.PROD_TYPE_ID = 'UN' OR STG_FIN_RZ_SHIP_PROD_D_ETL.RECOND_TYPE_CD = 'Recon Unit')) THEN NVL(t.SHIP_QT * STG_FIN_RZ_SHIP_PROD_D_ETL.MDL_UNITS_PER_SKU_QT,t.SHIP_QT) WHEN ((STG_FIN_RZ_SHIP_PROD_D_ETL.PROD_TYPE_ID = 'UN' OR STG_FIN_RZ_SHIP_PROD_D_ETL.RECOND_TYPE_CD = 'Recon Unit')) THEN t.SHIP_SLS_QT ELSE 0 END) AS SHIP_UNIT_QT,MAX(t.FUNC_AREA_LVL_7_CD),SUM(t.NET_DEALER_PRC_USD_AM),MAX(t.PRIM_SO_ADJ_CD),MAX(t.BILL_DOC_DT),MAX(t.BILL_DUE_DT),MAX(t.BILL_DOC_ID),MAX(t.MISC_CHRG_CD),MAX(t.PROD_OPT_MCC_CD),MAX(t.SO_ADJ_ALLOC_FG),SUM(t.SHIP_OPT_QT),MAX(t.ACK_CD),MAX(t.SO_CMPGN_TX),MAX(t.EIFFEL_INVN_CLS_CD),MAX(t.SO_MKT_PGM_TX),MAX(t.PKG_PROD_ID),MAX(CASE WHEN (T.REC_EXPLN_CD = 'C' AND T.REC_EXPLN_PRCS_CD = 'I') THEN T.PARNT_PROD_ID ELSE t.ORIG_PROD_ID END) AS SRVC_GDS_PROD_ID,SUM(t.SRVC_GDS_QT),MAX(t.USE_NM),MAX(t.VALU_VOL_NM),MAX(t.CONSOLIDTD_INV_FG),MAX(t.DRCT_CUST_IND_CD),MAX(t.ENGMT_MDL_CD),MAX(t.REBATE_ORD_RSN_CD),MAX(SD_ITM_CATG_CD) FROM STG_FIN_RZ_SHIP_MCC_UNB_DRV_ETL t INNER JOIN SRC_SYS_D SSD ON T.SRC_SYS_KY = SSD.SRC_SYS_KY INNER JOIN ADJ_D ADJ_D ON t.SO_ADJ_CD = ADJ_D.ADJ_CD AND SSD.ROLLUP_DFLT_CO_ID = ADJ_D.SPRN_CO_ID INNER JOIN (SELECT DISTINCT MISC_CHRG.MISC_CHRG_CD, SRC_SYS_D.ROLLUP_DFLT_CO_ID FROM MISC_CHRG INNER JOIN SRC_SYS_D ON MISC_CHRG.SRC_SYS_KY = SRC_SYS_D.SRC_SYS_KY) MISC_CHRG_CD ON ADJ_D.MISC_CHRG_CD = MISC_CHRG_CD.MISC_CHRG_CD AND SSD.ROLLUP_DFLT_CO_ID = MISC_CHRG_CD.ROLLUP_DFLT_CO_ID LEFT JOIN STG_FIN_RZ_SO_PROD_D_ETL AS STG_FIN_RZ_SHIP_PROD_D_ETL ON ('M' || trim(MISC_CHRG_CD.MISC_CHRG_CD) || '_' || trim(t.QTA_PROD_LN_ID)) = STG_FIN_RZ_SHIP_PROD_D_ETL.PROD_ID AND STG_FIN_RZ_SHIP_PROD_D_ETL.SPRN_CO_ID = SSD.ROLLUP_DFLT_CO_ID WHERE EXISTS (SELECT 1 FROM STG_FIN_RZ_SHIP_MCC_SERV_DRV_ETL t1 WHERE t1.SHIP_ID = t.SHIP_ID AND t1.SHIP_LN_ITM_ID = t.SHIP_LN_ITM_ID AND t1.SHIP_DT = t.SHIP_DT AND t1.SO_ID = t.SO_ID AND t1.SO_LN_ITM_ID = t.SO_LN_ITM_ID AND t1.SRC_SYS_KY = t.SRC_SYS_KY AND t1.ORD_CRT_DT = t.ORD_CRT_DT AND t1.EFF_FRM_GMT_TS = t.EFF_FRM_GMT_TS AND t1.SO_ADJ_CD = t.SO_ADJ_CD AND t1.BUS_AREA_CD = t.BUS_AREA_CD AND t1.PROD_ID = t.PROD_ID ) GROUP BY t.SHIP_ID,t.SHIP_LN_ITM_ID,t.SHIP_DT,t.EFF_FRM_GMT_TS,t.SRC_SYS_KY,t.BUS_AREA_CD,t.SO_ADJ_CD,t.SO_ID,t.ORD_CRT_DT,t.SO_LN_ITM_ID,11,t.REC_EXPLN_CD ;"""

    query_to_execute = """INSERT INTO STG_FIN_RZ_SHIP_DTL_CONTRA_DRV_FNL_ETL SELECT t.SHIP_ID,t.SRC_SYS_KY,t.SHIP_LN_ITM_ID,t.SHIP_DT,t.SO_ADJ_CD,t.EFF_FRM_GMT_TS,t.BUS_AREA_CD,t.SO_ID,t.ORD_CRT_DT,t.SO_LN_ITM_ID,t.REC_EXPLN_CD,NULL AS t.PROD_ID,MAX(t.CONTRA_FG),'M' || trim(MISC_CHRG_CD.MISC_CHRG_CD) || '_' || trim(t.QTA_PROD_LN_ID) AS MCC_PROD_ID,MAX(t.PRFT_CTR_CD),MAX(t.CBN_ID),MAX(t.SLDT_CUST_ID),MAX(t.SHPT_CUST_ID),MAX(t.BILT_CUST_ID),MAX(t.END_CUST_ID),MAX(t.MGMT_GEO_CD),MAX(t.SO_TYPE_CD),MAX(t.OM_SRC_SYS_KY),MAX(t.FIN_CLOSE_DT),MAX(t.SRC_PROD_LN_ID),MAX(t.FUNC_AREA_CD),MAX(t.CROSS_BORD_FG),MAX(t.SLS_CHNL_CD),MAX(t.DOC_CRNCY_CD),MAX(t.QTA_PROD_LN_ID),MAX(t.EFF_TO_GMT_TS),MAX(t.CUST_REQD_DLVR_DT),MAX(t.INVN_CLS_CD),'Y' AS QTA_PROD_LN_OVERR_FG,MAX(t.SLS_ORG_CD),MAX(t.SHIP_FRM_PLNT_CD),MAX(t.PARNT_SO_LN_ITM_ID),MAX(t.LEGL_CO_CD),MAX(t.SO_MTHD_CD),MAX(t.LEG_SO_ID),MAX(t.LEG_SO_LN_ITM_ID),SUM(t.SHIP_QT),0 AS SHIP_SLS_QT,SUM(t.UNIT_PRC_AM),SUM(t.GRS_EXT_SHIP_AM),SUM(t.GRS_EXT_SHIP_USD_AM),SUM(t.ORD_ADJ_SHIP_AM),SUM(t.ORD_ADJ_SHIP_USD_AM),SUM(t.NET_EXT_SHIP_AM),SUM(t.NET_EXT_SHIP_USD_AM),MAX(t.INS_GMT_TS),MAX(t.UPD_GMT_TS),MAX(t.REC_ST_NR),MAX(t.LOAD_JOB_NR),MAX(t.LGCL_DEL_FG),MAX(t.DSTRB_CHNL_CD),MAX(t.ORD_RSN_CD),MAX(t.VALU_DLVR_CHAIN_CD),MAX(t.ACCT_MGR_ID),MAX(t.BASE_UNIT_OF_MSR_CD),MAX(t.BIG_DEAL_ID),'B' AS BUS_TYPE_CD,MAX(t.CMRCL_CD),MAX(t.CUST_APP_CD),MAX(t.CUST_CNTRCT_ID),MAX(t.CUST_PO_ID),MAX(t.DLVR_MTHD_CD),MAX(t.GOV_CNTRCT_ID),MAX(t.INDNT_FG),MAX(t.LC_CD),'?' AS MATL_SLS_UNIT_OF_MSR_CD,MAX('M' || trim(MISC_CHRG_CD.MISC_CHRG_CD) || '_' || trim(t.QTA_PROD_LN_ID)) AS ORIG_PROD_ID,MAX(t.PAYM_TERM_CD),MAX(t.PRIM_AGNT_ID),MAX(t.PROJ_ID),MAX(t.PROMO_CD),MAX(t.SECND_AGNT_ID),MAX(t.SHPT_ISO_CTRY_CD),MAX(t.SLS_FRC_CD),MAX(t.SLS_OFF_CD),MAX(t.SLS_REP_CD),MAX(t.SLS_SUB_ENT_CD),MAX(t.SRVC_NOTIF_ID),MAX(t.SUPLYG_DIV_SUB_ENT_CD),MAX(t.WBS_ID),SUM(t.SHIP_ADJ_AM),MAX(t.TEAM_CD_ID),MAX(t.FRST_TCHPT_ACTL_SHIP_TS),MAX(t.LAST_TCHPT_ACTL_SHIP_TS),MAX(t.SHIP_POST_TS),MAX(t.QTA_CR_SUB_ENT_CD),MAX(t.GL_GRP_ACCT_ID),AVG(t.DOC_EXCH_RT),AVG(t.DOC_MTH_3_EXCH_RT),AVG(t.DOC_MTH_12_EXCH_RT),SUM(t.SHIP_ADJ_USD_AM),SUM(t.NET_CNSTNT_3_MTH_SHIP_USD_AM),SUM(t.NET_CNSTNT_12_MTH_SHIP_USD_AM),MAX(t.CONV_TYPE_ID),MAX(t.CONV_RT_CD),MAX(t.TRSY_BUS_ORG_CD),MAX(t.ORD_CRT_DT_YR_MTH_CD),MAX(t.UNRSTD_BUS_AREA_CD),MAX(t.PARNT_SO_ID),MAX(CASE WHEN (TRIM(t.REC_EXPLN_PRCS_CD) = '?') THEN 'M' ELSE TRIM(t.REC_EXPLN_PRCS_CD) || 'M' END) AS REC_EXPLN_PRCS_CD,MAX(t.PARNT_PROD_ID),MAX(t.FDW_TRD_INTRA_CO_FG),AVG(t.LC_EXCH_RT),AVG(t.LC_MTH_3_EXCH_RT),AVG(t.LC_MTH_12_EXCH_RT),SUM(t.NET_EXT_SHIP_LC_AM),SUM(t.GRS_EXT_SHIP_LC_AM),SUM(t.ORD_ADJ_SHIP_LC_AM),SUM(t.SHIP_ADJ_LC_AM),SUM(CASE WHEN ((STG_FIN_RZ_SHIP_PROD_D_ETL.MDL_UNITS_PER_SKU_QT > 1)) THEN NVL(t.SHIP_QT * STG_FIN_RZ_SHIP_PROD_D_ETL.MDL_UNITS_PER_SKU_QT,t.SHIP_QT) ELSE t.SHIP_QT END) AS SHIP_EXT_QT,SUM(CASE WHEN ((STG_FIN_RZ_SHIP_PROD_D_ETL.MDL_UNITS_PER_SKU_QT > 1) AND (STG_FIN_RZ_SHIP_PROD_D_ETL.PROD_TYPE_ID = 'UN' OR STG_FIN_RZ_SHIP_PROD_D_ETL.RECOND_TYPE_CD = 'Recon Unit')) THEN NVL(t.SHIP_QT * STG_FIN_RZ_SHIP_PROD_D_ETL.MDL_UNITS_PER_SKU_QT,t.SHIP_QT) WHEN ((STG_FIN_RZ_SHIP_PROD_D_ETL.PROD_TYPE_ID = 'UN' OR STG_FIN_RZ_SHIP_PROD_D_ETL.RECOND_TYPE_CD = 'Recon Unit')) THEN t.SHIP_SLS_QT ELSE 0 END) AS SHIP_UNIT_QT,MAX(t.FUNC_AREA_LVL_7_CD),SUM(t.NET_DEALER_PRC_USD_AM),MAX(t.PRIM_SO_ADJ_CD),MAX(t.BILL_DOC_DT),MAX(t.BILL_DUE_DT),MAX(t.BILL_DOC_ID),MAX(t.MISC_CHRG_CD),MAX(t.PROD_OPT_MCC_CD),MAX(t.SO_ADJ_ALLOC_FG),SUM(t.SHIP_OPT_QT),MAX(t.ACK_CD),MAX(t.SO_CMPGN_TX),MAX(t.EIFFEL_INVN_CLS_CD),MAX(t.SO_MKT_PGM_TX),MAX(t.PKG_PROD_ID),MAX(CASE WHEN (T.REC_EXPLN_CD = 'C' AND T.REC_EXPLN_PRCS_CD = 'I') THEN T.PARNT_PROD_ID ELSE t.ORIG_PROD_ID END) AS SRVC_GDS_PROD_ID,SUM(t.SRVC_GDS_QT),MAX(t.USE_NM),MAX(t.VALU_VOL_NM),MAX(t.CONSOLIDTD_INV_FG),MAX(t.DRCT_CUST_IND_CD),MAX(t.ENGMT_MDL_CD),MAX(t.REBATE_ORD_RSN_CD),MAX(SD_ITM_CATG_CD) FROM STG_FIN_RZ_SHIP_MCC_UNB_DRV_ETL t INNER JOIN SRC_SYS_D SSD ON T.SRC_SYS_KY = SSD.SRC_SYS_KY INNER JOIN ADJ_D ADJ_D ON t.SO_ADJ_CD = ADJ_D.ADJ_CD AND SSD.ROLLUP_DFLT_CO_ID = ADJ_D.SPRN_CO_ID INNER JOIN (SELECT DISTINCT MISC_CHRG.MISC_CHRG_CD, SRC_SYS_D.ROLLUP_DFLT_CO_ID FROM MISC_CHRG INNER JOIN SRC_SYS_D ON MISC_CHRG.SRC_SYS_KY = SRC_SYS_D.SRC_SYS_KY) MISC_CHRG_CD ON ADJ_D.MISC_CHRG_CD = MISC_CHRG_CD.MISC_CHRG_CD AND SSD.ROLLUP_DFLT_CO_ID = MISC_CHRG_CD.ROLLUP_DFLT_CO_ID LEFT JOIN STG_FIN_RZ_SO_PROD_D_ETL AS STG_FIN_RZ_SHIP_PROD_D_ETL ON ('M' || trim(MISC_CHRG_CD.MISC_CHRG_CD) || '_' || trim(t.QTA_PROD_LN_ID)) = STG_FIN_RZ_SHIP_PROD_D_ETL.PROD_ID AND STG_FIN_RZ_SHIP_PROD_D_ETL.SPRN_CO_ID = SSD.ROLLUP_DFLT_CO_ID WHERE EXISTS (SELECT 1 FROM STG_FIN_RZ_SHIP_MCC_SERV_DRV_ETL t1 WHERE t1.SHIP_ID = t.SHIP_ID AND t1.SHIP_LN_ITM_ID = t.SHIP_LN_ITM_ID AND t1.SHIP_DT = t.SHIP_DT AND t1.SO_ID = t.SO_ID AND t1.SO_LN_ITM_ID = t.SO_LN_ITM_ID AND t1.SRC_SYS_KY = t.SRC_SYS_KY AND t1.ORD_CRT_DT = t.ORD_CRT_DT AND t1.EFF_FRM_GMT_TS = t.EFF_FRM_GMT_TS AND t1.SO_ADJ_CD = t.SO_ADJ_CD AND t1.BUS_AREA_CD = t.BUS_AREA_CD AND t1.PROD_ID = t.PROD_ID ) GROUP BY t.SHIP_ID,t.SHIP_LN_ITM_ID,t.SHIP_DT,t.EFF_FRM_GMT_TS,t.SRC_SYS_KY,t.BUS_AREA_CD,t.SO_ADJ_CD,t.SO_ID,t.ORD_CRT_DT,t.SO_LN_ITM_ID,11,t.REC_EXPLN_CD ;"""
    ret_val = execute_sql("3", spark_session, spark_context, sql_context, query_to_execute)
    if ret_val is False:
        print("ERROR executing query {query_to_execute}".format(query_to_execute=query_to_execute))
        sys.exit(3)

    #query_to_execute = """INSERT INTO STG_FIN_RZ_SHIP_DTL_CONTRA_DRV_FNL_ETL SELECT t.SHIP_ID,t.SRC_SYS_KY,t.SHIP_LN_ITM_ID,t.SHIP_DT,t.SO_ADJ_CD,t.EFF_FRM_GMT_TS,t.BUS_AREA_CD,t.SO_ID,t.ORD_CRT_DT,t.SO_LN_ITM_ID,t.REC_EXPLN_CD,t.PROD_ID,t.CONTRA_FG,t.PRFT_CTR_CD,t.CBN_ID,t.SLDT_CUST_ID,t.SHPT_CUST_ID,t.BILT_CUST_ID,t.END_CUST_ID,t.MGMT_GEO_CD,t.SO_TYPE_CD,t.OM_SRC_SYS_KY,t.FIN_CLOSE_DT,t.SRC_PROD_LN_ID,t.FUNC_AREA_CD,t.CROSS_BORD_FG,t.SLS_CHNL_CD,t.DOC_CRNCY_CD,t.QTA_PROD_LN_ID,t.EFF_TO_GMT_TS,t.CUST_REQD_DLVR_DT,t.INVN_CLS_CD,t.QTA_PROD_LN_OVERR_FG,t.SLS_ORG_CD,t.SHIP_FRM_PLNT_CD,t.PARNT_SO_LN_ITM_ID,t.LEGL_CO_CD,t.SO_MTHD_CD,t.LEG_SO_ID,t.LEG_SO_LN_ITM_ID,t.SHIP_QT,t.SHIP_SLS_QT,t.UNIT_PRC_AM,t.GRS_EXT_SHIP_AM,t.GRS_EXT_SHIP_USD_AM,t.ORD_ADJ_SHIP_AM,t.ORD_ADJ_SHIP_USD_AM,t.NET_EXT_SHIP_AM,t.NET_EXT_SHIP_USD_AM,t.INS_GMT_TS,t.UPD_GMT_TS,t.REC_ST_NR,t.LOAD_JOB_NR,t.LGCL_DEL_FG,t.DSTRB_CHNL_CD,t.ORD_RSN_CD,t.VALU_DLVR_CHAIN_CD,t.ACCT_MGR_ID,t.BASE_UNIT_OF_MSR_CD,t.BIG_DEAL_ID,t.BUS_TYPE_CD,t.CMRCL_CD,t.CUST_APP_CD,t.CUST_CNTRCT_ID,t.CUST_PO_ID,t.DLVR_MTHD_CD,t.GOV_CNTRCT_ID,t.INDNT_FG,t.LC_CD,t.MATL_SLS_UNIT_OF_MSR_CD,t.ORIG_PROD_ID,t.PAYM_TERM_CD,t.PRIM_AGNT_ID,t.PROJ_ID,t.PROMO_CD,t.SECND_AGNT_ID,t.SHPT_ISO_CTRY_CD,t.SLS_FRC_CD,t.SLS_OFF_CD,t.SLS_REP_CD,t.SLS_SUB_ENT_CD,t.SRVC_NOTIF_ID,t.SUPLYG_DIV_SUB_ENT_CD,t.WBS_ID,t.SHIP_ADJ_AM,t.TEAM_CD_ID,t.FRST_TCHPT_ACTL_SHIP_TS,t.LAST_TCHPT_ACTL_SHIP_TS,t.SHIP_POST_TS,t.QTA_CR_SUB_ENT_CD,t.GL_GRP_ACCT_ID,t.DOC_EXCH_RT,t.DOC_MTH_3_EXCH_RT,t.DOC_MTH_12_EXCH_RT,t.SHIP_ADJ_USD_AM,t.NET_CNSTNT_3_MTH_SHIP_USD_AM,t.NET_CNSTNT_12_MTH_SHIP_USD_AM,t.CONV_TYPE_ID,t.CONV_RT_CD,t.TRSY_BUS_ORG_CD,t.ORD_CRT_DT_YR_MTH_CD,t.UNRSTD_BUS_AREA_CD,t.PARNT_SO_ID,CASE WHEN (TRIM(t.REC_EXPLN_PRCS_CD) = '?') THEN 'M' ELSE TRIM(t.REC_EXPLN_PRCS_CD) || 'M' END AS REC_EXPLN_PRCS_CD,t.PARNT_PROD_ID,t.FDW_TRD_INTRA_CO_FG,t.LC_EXCH_RT,t.LC_MTH_3_EXCH_RT,t.LC_MTH_12_EXCH_RT,t.NET_EXT_SHIP_LC_AM,t.GRS_EXT_SHIP_LC_AM,t.ORD_ADJ_SHIP_LC_AM,t.SHIP_ADJ_LC_AM,t.SHIP_EXT_QT,t.SHIP_UNIT_QT,t.FUNC_AREA_LVL_7_CD,t.NET_DEALER_PRC_USD_AM,t.PRIM_SO_ADJ_CD,t.BILL_DOC_DT,t.BILL_DUE_DT,t.BILL_DOC_ID,t.MISC_CHRG_CD,t.PROD_OPT_MCC_CD,t.SO_ADJ_ALLOC_FG,t.SHIP_OPT_QT,t.ACK_CD,t.SO_CMPGN_TX,t.EIFFEL_INVN_CLS_CD,t.SO_MKT_PGM_TX,t.PKG_PROD_ID,t.SRVC_GDS_PROD_ID,t.SRVC_GDS_QT,t.USE_NM,t.VALU_VOL_NM,t.CONSOLIDTD_INV_FG,t.DRCT_CUST_IND_CD,t.ENGMT_MDL_CD,t.REBATE_ORD_RSN_CD,t.SD_ITM_CATG_CD FROM STG_FIN_RZ_SHIP_MCC_UNB_DRV_ETL t WHERE NOT EXISTS (SELECT 1 FROM STG_FIN_RZ_SHIP_MCC_SERV_DRV_ETL t1 WHERE t1.SO_ID = t.SO_ID AND t1.SRC_SYS_KY = t.SRC_SYS_KY AND t1.ORD_CRT_DT = t.ORD_CRT_DT AND t1.EFF_FRM_GMT_TS = t.EFF_FRM_GMT_TS AND t1.SO_LN_ITM_ID = t.SO_LN_ITM_ID AND t1.SO_ADJ_CD = t.SO_ADJ_CD AND t1.BUS_AREA_CD = t.BUS_AREA_CD AND t1.SHIP_ID = t.SHIP_ID AND t1.SHIP_LN_ITM_ID = t.SHIP_LN_ITM_ID AND t1.SHIP_DT = t.SHIP_DT AND t1.PROD_ID = t.PROD_ID ) ;""" 
    
    query_to_execute = """INSERT INTO STG_FIN_RZ_SHIP_DTL_CONTRA_DRV_FNL_ETL SELECT t.SHIP_ID,t.SRC_SYS_KY,t.SHIP_LN_ITM_ID,t.SHIP_DT,t.SO_ADJ_CD,t.EFF_FRM_GMT_TS,t.BUS_AREA_CD,t.SO_ID,t.ORD_CRT_DT,t.SO_LN_ITM_ID,t.REC_EXPLN_CD,t.PROD_ID,t.CONTRA_FG,t.PRFT_CTR_CD,t.CBN_ID,t.SLDT_CUST_ID,t.SHPT_CUST_ID,t.BILT_CUST_ID,t.END_CUST_ID,t.MGMT_GEO_CD,t.SO_TYPE_CD,t.OM_SRC_SYS_KY,t.FIN_CLOSE_DT,t.SRC_PROD_LN_ID,t.FUNC_AREA_CD,t.CROSS_BORD_FG,t.SLS_CHNL_CD,t.DOC_CRNCY_CD,t.QTA_PROD_LN_ID,t.EFF_TO_GMT_TS,t.CUST_REQD_DLVR_DT,t.INVN_CLS_CD,t.QTA_PROD_LN_OVERR_FG,t.SLS_ORG_CD,t.SHIP_FRM_PLNT_CD,t.PARNT_SO_LN_ITM_ID,t.LEGL_CO_CD,t.SO_MTHD_CD,t.LEG_SO_ID,t.LEG_SO_LN_ITM_ID,t.SHIP_QT,t.SHIP_SLS_QT,t.UNIT_PRC_AM,t.GRS_EXT_SHIP_AM,t.GRS_EXT_SHIP_USD_AM,t.ORD_ADJ_SHIP_AM,t.ORD_ADJ_SHIP_USD_AM,t.NET_EXT_SHIP_AM,t.NET_EXT_SHIP_USD_AM,t.INS_GMT_TS,t.UPD_GMT_TS,t.REC_ST_NR,t.LOAD_JOB_NR,t.LGCL_DEL_FG,t.DSTRB_CHNL_CD,t.ORD_RSN_CD,t.VALU_DLVR_CHAIN_CD,t.ACCT_MGR_ID,t.BASE_UNIT_OF_MSR_CD,t.BIG_DEAL_ID,t.BUS_TYPE_CD,t.CMRCL_CD,t.CUST_APP_CD,t.CUST_CNTRCT_ID,t.CUST_PO_ID,t.DLVR_MTHD_CD,t.GOV_CNTRCT_ID,t.INDNT_FG,t.LC_CD,t.MATL_SLS_UNIT_OF_MSR_CD,t.ORIG_PROD_ID,t.PAYM_TERM_CD,t.PRIM_AGNT_ID,t.PROJ_ID,t.PROMO_CD,t.SECND_AGNT_ID,t.SHPT_ISO_CTRY_CD,t.SLS_FRC_CD,t.SLS_OFF_CD,t.SLS_REP_CD,t.SLS_SUB_ENT_CD,t.SRVC_NOTIF_ID,t.SUPLYG_DIV_SUB_ENT_CD,t.WBS_ID,t.SHIP_ADJ_AM,t.TEAM_CD_ID,t.FRST_TCHPT_ACTL_SHIP_TS,t.LAST_TCHPT_ACTL_SHIP_TS,t.SHIP_POST_TS,t.QTA_CR_SUB_ENT_CD,t.GL_GRP_ACCT_ID,t.DOC_EXCH_RT,t.DOC_MTH_3_EXCH_RT,t.DOC_MTH_12_EXCH_RT,t.SHIP_ADJ_USD_AM,t.NET_CNSTNT_3_MTH_SHIP_USD_AM,t.NET_CNSTNT_12_MTH_SHIP_USD_AM,t.CONV_TYPE_ID,t.CONV_RT_CD,t.TRSY_BUS_ORG_CD,t.ORD_CRT_DT_YR_MTH_CD,t.UNRSTD_BUS_AREA_CD,t.PARNT_SO_ID,CASE WHEN (TRIM(t.REC_EXPLN_PRCS_CD) = '?') THEN 'M' ELSE TRIM(t.REC_EXPLN_PRCS_CD) || 'M' END AS REC_EXPLN_PRCS_CD,t.PARNT_PROD_ID,t.FDW_TRD_INTRA_CO_FG,t.LC_EXCH_RT,t.LC_MTH_3_EXCH_RT,t.LC_MTH_12_EXCH_RT,t.NET_EXT_SHIP_LC_AM,t.GRS_EXT_SHIP_LC_AM,t.ORD_ADJ_SHIP_LC_AM,t.SHIP_ADJ_LC_AM,t.SHIP_EXT_QT,t.SHIP_UNIT_QT,t.FUNC_AREA_LVL_7_CD,t.NET_DEALER_PRC_USD_AM,t.PRIM_SO_ADJ_CD,t.BILL_DOC_DT,t.BILL_DUE_DT,t.BILL_DOC_ID,t.MISC_CHRG_CD,t.PROD_OPT_MCC_CD,t.SO_ADJ_ALLOC_FG,t.SHIP_OPT_QT,t.ACK_CD,t.SO_CMPGN_TX,t.EIFFEL_INVN_CLS_CD,t.SO_MKT_PGM_TX,t.PKG_PROD_ID,t.SRVC_GDS_PROD_ID,t.SRVC_GDS_QT,t.USE_NM,t.VALU_VOL_NM,t.CONSOLIDTD_INV_FG,t.DRCT_CUST_IND_CD,t.ENGMT_MDL_CD,t.REBATE_ORD_RSN_CD,t.SD_ITM_CATG_CD FROM STG_FIN_RZ_SHIP_MCC_UNB_DRV_ETL t WHERE NOT EXISTS (SELECT 1 FROM STG_FIN_RZ_SHIP_MCC_SERV_DRV_ETL t1 WHERE t1.SO_ID = t.SO_ID AND t1.SRC_SYS_KY = t.SRC_SYS_KY AND t1.ORD_CRT_DT = t.ORD_CRT_DT AND t1.EFF_FRM_GMT_TS = t.EFF_FRM_GMT_TS AND t1.SO_LN_ITM_ID = t.SO_LN_ITM_ID AND t1.SO_ADJ_CD = t.SO_ADJ_CD AND t1.BUS_AREA_CD = t.BUS_AREA_CD AND t1.SHIP_ID = t.SHIP_ID AND t1.SHIP_LN_ITM_ID = t.SHIP_LN_ITM_ID AND t1.SHIP_DT = t.SHIP_DT AND t1.PROD_ID = t.PROD_ID ) ;""" 
    ret_val = execute_sql("4", spark_session, spark_context, sql_context, query_to_execute)
    if ret_val is False:
        print("ERROR executing query {query_to_execute}".format(query_to_execute=query_to_execute))
        sys.exit(4)

    query_to_execute = """/* PARAM_FIN_RZ_L2_SHIP_MAINTAIN_TABLE_s STG_FIN_RZ_SHIP_DTL_CONTRA_DRV_FNL_ETL, UPDATE STATISTICS 'ON NECESSARY COLUMNS'; */ SELECT 1;""" 
    ret_val = execute_sql("5", spark_session, spark_context, sql_context, query_to_execute)
    if ret_val is False:
        print("ERROR executing query {query_to_execute}".format(query_to_execute=query_to_execute))
        sys.exit(5)


    spark_session.stop()


if __name__ == "__main__":
    # datetime object containing current date and time
    now = datetime.now()
     
    # dd/mm/YY H:M:S
    dt_string = now.strftime("%Y/%m/%d %H:%M:%S")
    file_name =  os.path.basename(sys.argv[0])
    print("{} | {} | starting execution".format(dt_string, file_name))
    
    execute()
    
    dt_string = now.strftime("%Y/%m/%d %H:%M:%S")
    
    print("{} | {} | done".format(dt_string, file_name))

#
# end
#
